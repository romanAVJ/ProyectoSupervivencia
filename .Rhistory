index_tj <- length(which(indi == TRUE))
#S(t0)
paramt0 <- as.matrix(df[index_tj, param])
return (paramt0)
}
quantile_est <- function(St, ee, tj, p = 0.5){
# size
n <- length(St)
#find infimum
index_max <- length(which(St > 1 - p))
# estimator
tp <- tj[index_max]
return(tp)
}
quantile_ci <- function(St, ee, tj, p = 0.5, alpha = 0.05){
#indicator
indi <- abs(St - (1 - p)) / ee <= qnorm(1-alpha/2)
#interval of the condition
tj_ci <- tj[indi]
#sort and return intervals
tj_ci <- sort(tj_ci)
n <- length(tj_ci)
#confidence
ci_lower <- tj_ci[1]
ci_upper <- tj_ci[n]
return(c(ci_lower,ci_upper))
}
censor_time <- function(df, column = 1){
# times
t <- df[,column]
#df t and c
df <- apply(X = t, MARGIN = 1, FUN = parse_censor)
# transpose
df <- t(df)
#tidy
colnames(df) <- c('time', 'censored')
#to dataframe
df <- data.frame(df)
return(df)
}
table_KM <- function(df){
#' Product Limit Estimator and its estimated variance and std deviations BY HAND
#' according to Klein book
#total events
N <- dim(df)[1]
# times
tj <- unique(df[, 'time'])
# censored
cj <- df %>% group_by(time) %>% summarise(cj = sum(censored == 0))
cj <- cj[,'cj'] %>% as.matrix()
# events
dj <-df %>% group_by(time) %>% summarise(dj = sum(censored == 1))
dj <- dj[,'dj'] %>% as.matrix()
# nj
nj <- ind_risk(N = N, dj = dj, cj = cj)
# dj/nj
dj_nj <- dj/nj
#Kaplan Meier
St <- cumprod(1-dj_nj)
#sum for variance
sum_di.ni_ni.di <- cumsum(dj/(nj*(nj-dj)))
#varaince
var.St <- St*St*sum_di.ni_ni.di
#std dev
std_dev.St <- sqrt(var.St)
#table
df <- data.frame(tj, nj, dj, cj, dj_nj, St, sum_di.ni_ni.di, var.St, std_dev.St)
# delete observations with ONLY censored data
indi <- ifelse(dj == 0 & cj > 0,FALSE,TRUE)
df <- df[indi,]
return(df)
}
table_KM_surv <- function(df){
#kaplan meier fit
sfit <- survfit(Surv(time,censored) ~ 1, data = df)
# basic table
tj <- sfit$time
nj = sfit$n.risk
dj = sfit$n.event
cj = sfit$n.censor
# dj/nj
dj_nj <- dj/nj
#Kaplan Meier
St <- cumprod(1-dj_nj)
#sum for variance
sum_di.ni_ni.di <- cumsum(dj/(nj*(nj-dj)))
#varaince
var.St <- St*St*sum_di.ni_ni.di
#std dev
std_dev.St <- sqrt(var.St)
#table
df <- data.frame(tj, nj, dj, cj, dj_nj, St, sum_di.ni_ni.di, var.St, std_dev.St)
# delete observations with ONLY censored data
indi <- ifelse(dj == 0 & cj > 0,FALSE,TRUE)
df <- df[indi,]
return(df)
}
table_NA <- function(df){
#kaplan meier fit
sfit <- survfit(Surv(time,censored) ~ 1, data = df)
# basic table
tj <- sfit$time
nj = sfit$n.risk
dj = sfit$n.event
#Nelson Aalen
Ht_na <- cumsum(dj/nj)
#Variance N.A
var.Ht <- cumsum(dj/(nj*nj))
#std dev
std.Ht <- sqrt(var.Ht)
#dataframe
df <- data.frame(tj, nj, dj, Ht_na, var.Ht, std.Ht)
return(df)
}
table_confidence <- function(df, alpha = 0.05){
#kaplan meier fit
sfit <- survfit(Surv(time,censored) ~ 1, data = df)
# basic table
tj <- sfit$time
nj = sfit$n.risk
dj = sfit$n.event
cj = sfit$n.censor
St = sfit$surv
# extras
sum_di.ni_ni.di <- cumsum(dj/(nj*(nj-dj)))
#varaince
var.St <- St*St*sum_di.ni_ni.di
#std dev
std_dev.St <- sqrt(var.St)
#linear confidence interval
ci_lower_linear <- St - qnorm(1-alpha/2) * std_dev.St
ci_lower_linear <- ifelse(ci_lower_linear < 0, 0, ci_lower_linear) #min(0,ci)
ci_upper_linear <- St + qnorm(1-alpha/2) * std_dev.St
ci_upper_linear <- ifelse(ci_upper_linear > 1, 1, ci_upper_linear) #max(1,ci)
#log-interval
W <- exp(qnorm(1-alpha/2) * sqrt(var.St/(St*St)) / log(St))
ci_lower_log <- St^(1/W)
ci_lower_log <- ifelse(ci_lower_log < 0, 0, ci_lower_log) #min(0,ci)
ci_upper_log <- St^(W)
ci_upper_log <- ifelse(ci_upper_log > 1, 1, ci_upper_log) #max(1,ci)
#dataframe
df <- data.frame(tj, St, ci_lower_linear, ci_upper_linear, ci_lower_log, ci_upper_log)
return(df)
}
plot_ci <- function(df_ci, linear = TRUE, log = TRUE){
#subtitle
if(linear & log){
subttl <- 'Red: linear conf. int. Green: log conf. int.'
}
else{
if(linear){subttl <- 'Red: linear conf. int.'}
else
if(log){subttl <- 'Green: log conf. int.'}
else{subttl <- ''}
}
#plot
plot(x = df_ci$tj, y = df_ci$St, type = 'l', xlab = 'time', ylab = 'St', main = 'Survival Plot', sub = subttl, ylim = c(0,1))
#ci
if(linear){
lines(df_ci$tj, df_ci$ci_lower_linear, col = 'red')
lines(df_ci$tj, df_ci$ci_upper_linear, col = 'red')
}
if(log){
lines(df_ci$tj, df_ci$ci_lower_log, col = 'green')
lines(df_ci$tj, df_ci$ci_upper_log, col = 'green')
}
}
df_ej1 <- read_excel('tablas_klein_cap4.xlsx', sheet = 'ej1', col_names = FALSE) %>% censor_time()
#table of estimations
# Kaplan Meier
table_km <- table_KM(df_ej1)
table_ci <- table_confidence(df_ej1, alpha = 0.05)
# Nelson Aalen
table_na <- table_NA(df_ej1)
#print estimations
# kable(table_km)
# excersie a)
St12 <- parameter_t0(table_km, 12, param = c('St','std_dev.St'))
St60 <- parameter_t0(table_km, 60, param = c('St','std_dev.St'))
# excersise b)
Ht60 <- parameter_t0(table_na, 60, param = c('Ht_na', 'std.Ht'))
ST60_prime <- exp(-Ht60)
# excersise c)
ci_60 <- parameter_t0(table_ci, 60, param = c("ci_lower_linear", "ci_upper_linear", "ci_lower_log", "ci_upper_log"))
# excersise h)
mean400 <- trunc_mean(tj = table_km$tj, Sj = table_km$St, tao = 400)
# excesise i)
t_05 <- quantile_est(St = table_km$St, ee = table_km$std_dev.St, tj = table_km$tj, p = 0.5)
t_ci_05 <- quantile_ci(St = table_km$St, ee = table_km$std_dev.St, tj = table_km$tj, p = 0.5, alpha = 0.05)
#plot
plot_ci(table_ci)
#charge data
df_ej2_lr <- read_excel('tablas_klein_cap4.xlsx', sheet = 'ej2_lr', col_names = FALSE) %>% censor_time()
df_ej2_hr <- read_excel('tablas_klein_cap4.xlsx', sheet = 'ej2_hr', col_names = FALSE) %>% censor_time()
# tables
# kaplan meier
ej2_km1 <- table_KM_surv(df_ej2_lr)
ej2_km2 <- table_KM_surv(df_ej2_hr)
# nelson aalen
ej2_NA1 <- table_NA(df_ej2_lr)
ej2_NA2 <- table_NA(df_ej2_hr)
#confidence intervals
ej2_ci1 <- table_confidence(df = df_ej2_lr,alpha = 0.05)
ej2_ci2 <- table_confidence(df = df_ej2_hr,alpha = 0.05)
ej2_km1 %>% select(tj, St, std_dev.St)  %>%  knitr::kable()
ej2_km2 %>% select(tj, St, std_dev.St)  %>%  knitr::kable()
ej2_NA1 %>% select(tj, Ht_na, std.Ht) %>% knitr::kable()
ej2_NA2 %>% select(tj, Ht_na, std.Ht) %>% knitr::kable()
data.frame(tj =ej2_NA1$tj , hj = deriv_Ht(ej2_NA1$tj, ej2_NA1$Ht_na)) %>% kable()
data.frame(tj =ej2_NA2$tj , hj = deriv_Ht(ej2_NA2$tj, ej2_NA2$Ht_na)) %>% kable()
mu1_extra <- conf_int_mean(df_km = ej2_km1, tao = ej2_km1$tj[length(ej2_km1$tj)])
mu2_extra <- conf_int_mean(df_km = ej2_km2, tao = ej2_km2$tj[length(ej2_km2$tj)])
#quantile estimator for the 0.5
t05_lr <- quantile_est(ej2_km1$St, ej2_km1$std_dev.St, ej2_km1$tj, p = 0.5)
t05_hr <- quantile_est(ej2_km2$St, ej2_km2$std_dev.St, ej2_km2$tj, p = 0.5)
#CI
t05_lr_ci <- quantile_ci(ej2_km1$St, ej2_km1$std_dev.St, ej2_km1$tj, p = 0.5, alpha = 0.05)
t05_hr_ci <- quantile_ci(ej2_km2$St, ej2_km2$std_dev.St, ej2_km2$tj, p = 0.5, alpha = 0.05)
ci_300_lr <- parameter_t0(ej2_ci1, 300, param = c("St", "ci_lower_linear", "ci_upper_linear", "ci_lower_log", "ci_upper_log"))
ci_300_hr <- parameter_t0(ej2_ci2, 300, param = c("St", "ci_lower_linear", "ci_upper_linear", "ci_lower_log", "ci_upper_log"))
View(table_km)
#libraries
library(dplyr)
library(ggplot2)
library(survival)
library(survminer)
#own functions for survivance analysis
source('Functions/surv_functions.R')
source('Functions/EDA_np_functions.R')
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
# look data set
# clientes %>% head() %>% knitr::kable()
names(clientes)
plt_bxplt(clientes, 'Abandono', 'NumTransx')
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
library(readr)
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
library(readr)
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
getwd()
setwd('C:/Users/Ryo/Documents/ITAM/8Semestre/Supervivencia/Proyecto')
# principal table
clientes <- readRDS("FinalDataSet/transacciones.rds")
varnum <- clientes$UltmTrnsx
names(clientes)
clientes[,varnum]
dfs %>%
ggplot(aes(x = NumTransx, y = Abandono)) +
geom_boxplot()
dfs %>%
ggplot(aes(x = NumTransx, y = Abandono)) +
geom_boxplot()
dfs <- clientes
varnum <- 'NumTransx'
varcat <- 'Abandono'
dfs %>%
ggplot(aes(x = NumTransx, y = Abandono)) +
geom_boxplot()
dfs %>%
ggplot(aes(x = Abandono, y = NumTransx)) +
geom_boxplot()
dfs %>%
ggplot(aes(x = factor(Abandono), y = NumTransx)) +
geom_boxplot()
dfs %>%
ggplot(aes(x = factor(Abandono), y = NumTransx)) +
geom_boxplot() +
theme_bw()
str_c('dfs %>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
library(stringr)
str_c('dfs %>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
p1 <- str_c('dfs %>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
eval(parse(text = p1))
dfs <- clientes
varnum <- 'NumTransx'
varcat <- 'Abandono'
p1 <- str_c(dfs,
'%>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
eval(parse(text = p1))
p1 <- str_c(dfs %>% data.frame(),
'%>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
eval(parse(text = p1))
dfs <- clientes
varnum <- 'NumTransx'
varcat <- 'Abandono'
p1 <- str_c(
'ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
dfs %>% eval(parse(text = p1))
bxplt <- function(df, varcat, varnum){
dfs <- df
p1 <- str_c(
'dfs %>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
return(p1)
}
df1 <- clientes
g <- bxplt(clientes, varcat, varnum)
g
bxplt <- function(df, varcat, varnum){
dfs <- df
p1 <- str_c(
'dfs %>% ggplot(aes(x = factor(',
varcat,
'), y = ',
varnum,
')) + geom_boxplot() + theme_bw()')
r <- eval(parse(text = p1))
return(r)
}
g <- bxplt(clientes, varcat, varnum)
g
head(cars)
head(diamonds)
g <- bxplt(color, varcat, varnum)
g <- bxplt(diamonds, 'cut', 'price')
g
# univariate analysis
#boxplot
bxplt_trans_ab <- ggplot(data = clientes) +
geom_boxplot(mapping = aes(x = factor(Abandono),y = NumTransx, fill = factor(Abandono))) +
theme_minimal()
bxplt_trans_mora <- ggplot(data = clientes) +
geom_boxplot(mapping = aes(x = factor(en_mora),y = NumTransx, fill = factor(en_mora))) +
theme_minimal()
#violin plot
vln_trans_ab <- ggplot(data = clientes) +
geom_violin(mapping = aes(x = factor(Abandono),y = NumTransx, fill = factor(Abandono))) +
theme_minimal()
vln_trans_mora <- ggplot(data = clientes) +
geom_violin(mapping = aes(x = factor(en_mora),y = NumTransx, fill = factor(en_mora))) +
theme_minimal()
# density estimation
clientes$NumTransx %>% plt_dnsty(bw = 'nrd0')
#plot
bxplt_trans_ab
bxplt_trans_mora
vln_trans_ab
vln_trans_mora
bxplt_trans_ab
bxplt_trans_mora
vln_trans_ab
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97)) +
geom_point(col = 'red', pch = 16)
# density estimation
clientes$NumTransx %>% plt_dnsty(bw = 'nrd0')
#### ========================= Routines ==================================
plt_dnsty <- function(x, bw = 'nrd0', kernel_list = c('epanechnikov','gaussian','rectangular')){
# plot histogram and a series of KDA
x %>% hist(col = 'pink', prob = T)
#kernel densities
n <- length(kernel_list)
if(n > 0 ){
i <- 2
for (k0 in kernel_list){
x %>% density(bw = bw, kernel = k0) %>% lines(col = i, lwd = 3)
i <- i + 1
}
legend('topright', legend = unlist(kernel_list), col = 2:i, lwd = rep(3, n))
}
}
plt_bxplt <- function(df, x.var, y.var){
#cast vars
x.var <- rlang::sym(quo_name(enquo(x.var)))
y.var <- rlang::sym(quo_name(enquo(y.var)))
# graph
g <- df %>%
ggplot(mapping = aes(x = !! x.var, y = !! y.var, fill = !! x.var)) +
geom_boxplot()
return(g)
}
# density estimation
clientes$NumTransx %>% plt_dnsty(bw = 'nrd0')
clientes %>% ggplot(mapping = aes(x = factor(Abandono), y = NumTransx, fill = factor(Abandono))) + geom_boxplot() + geom_jitter()
clientes %>% ggplot(mapping = aes(x = factor(Abandono), y = NumTransx, fill = factor(Abandono))) + geom_boxplot() + geom_jitter(alpha = 0.001)
clientes %>% ggplot(mapping = aes(x = factor(Abandono), y = NumTransx, fill = factor(Abandono))) + geom_boxplot() + geom_jitter(alpha = 0.1)
install.packages('tmap')
#======================mapan
install.packages('leaflet')
m <- leaflet() %>% setView(lng = clientes$lon, lat = clientes$lat, zoom = 12) m %>% addTiles()
library(leaflet)
m <- leaflet() %>% setView(lng = clientes$lon, lat = clientes$lat, zoom = 12) m %>% addTiles()
m <- leaflet() %>% setView(lng = clientes$lon, lat = clientes$lat, zoom = 12)  %>% addTiles()
m
m <- leaflet() %>% setView(lng = clientes$lon[1:3], lat = clientes$lat[1:3])  %>% addTiles()
m <- leaflet() %>% setView(lng = clientes$lon[1:3], lat = clientes$lat[1:3], zoom = 12)  %>% addTiles()
m
m <- leaflet() %>% setView(lng = clientes$lon[1], lat = clientes$lat[1], zoom = 12)  %>% addTiles()
m
m <- leaflet() %>% addMarkers(lng = clientes$lon[1], lat = clientes$lat[1], zoom = 12)  %>% addTiles()
m <- leaflet() %>% addMarkers(lng = clientes$lon[1], lat = clientes$lat[1])  %>% addTiles()
m
m <- leaflet() %>% addMarkers(lng = clientes$lon[1:10], lat = clientes$lat[1:10])  %>% addTiles()
m
m <- leaflet() %>% addMarkers(lng = clientes$lon, lat = clientes$lat)  %>% addTiles()
m
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = xlim = c(-130, -60), ylim = c(20, 50)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -60), ylim = c(20, 50)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -60), ylim = c(20, 30)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -60), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -50), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -40), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -30), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -10), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -80), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.1)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.01)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 1)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.1)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.5)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -100), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.2)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -120), ylim = c(22, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.2)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -120), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.2)
# mexico lon, lat
clientes %>% ggplot(mapping = aes(x = lon, y = lat)) +
borders(xlim = c(-130, -110), ylim = c(20, 25)) +
geom_point(col = 'red', pch = 16, alpha = 0.2)
